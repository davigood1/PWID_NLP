#install.packages("pacman")
source(negex.R) #Load functions for negex to work
#install.packages("pacman")
source(negex.R) #Load functions for negex to work
#install.packages("pacman")
source(negex.R) #Load functions for negex to work
#install.packages("pacman")
source("negex.R") #Load functions for negex to work
#install.packages("pacman")
source("negex.R") #Load functions for negex to work
#install.packages("pacman")
library(pacman)
source("negex.R") #Load functions for negex to work
df <- data.frame(doc_id = c("1", "2")
text = c("57 y/o male denies history of injection drug use",
df <- data.frame(doc_id = c("1", "2"),
text = c("57 y/o male denies history of injection drug use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
df <- data.frame(doc_id = c("1", "2"),
text = c("57 y/o male denies history of injection drug use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df.all[.x,]$text, doc_id = df.all[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#install.packages("pacman")
library(pacman, tidyverse, tidylog)
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#install.packages("pacman")
library(pacman, tidyverse, tidylog, purrr)
#install.packages("pacman")
library(pacman, tidyverse, tidylog, purr)
p_load(tidyverse, tidylog, purr)
p_load(tidyverse, tidylog, purrr)
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Use negex to tag negated toxens
negex.list <- map(annotated_text, ~{
negex_processor(.x, negex_simp, 6)
}
)
#Remove negated tokens
negex.remove <- map(negex.list, ~{
.x %>%
filter(negated == FALSE) %>%
filter(!negex_category %in% c("definiteNegatedExistence", "probableNegatedExistence")) %>%
group_by(doc_id) %>%
summarise(text.neg = paste0(token, collapse = " "))
})
df.neg <- bind_rows(negex.remove)
View(df.neg)
df <- df %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug use", ignore_case = T),  replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug use", ignore_case = T), replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug use", ignore_case = T), replacement = "IVDU"))
df <- df %>% left_join(df.neg, by = "doc_id")
df <- df %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug use", ignore_case = T),  replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug use", ignore_case = T), replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug use", ignore_case = T), replacement = "IVDU"))
test_fitted <- readRDS("fit_model_predict.rds")
test_fitted <- readRDS("fit_model_predict.RDS")
test_fitted <- readRDS("Output/fit_model_predict.rds")
df.predicted <- bind_cols(df.all.neg,
predict(test_fitted, new_data = df.all.neg, type = "class"),
predict(test_fitted, new_data = df.all.neg, type = "prob"))
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
p_load(tidyverse, tidylog, purrr, tidymodels)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
p_load(tidyverse, tidylog, purrr, tidymodels, tidyrecipes)
p_load(tidyverse, tidylog, purrr, tidymodels, recipes)
p_load(tidyverse, tidylog, purrr, tidymodels, textrecipes)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
p_load(tidyverse, tidylog, purrr, tidymodels, tidytext, textrecipes, textclean, stringr)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
p_load(tidyverse, tidylog, purrr, tidymodels, tidytext, textrecipes, textclean, stringr, tokenizers)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df,
predict(test_fitted, new_data = df, type = "class")
p_load(tidyverse, tidylog, purrr, tidymodels, tidytext, textrecipes, textclean, stringr, tokenizers, workflowsets, themis)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
library(pacman)
p_load(tidyverse, tidylog, gdata, lubridate, MatchIt, skimr, kableExtra, flextable, gtsummary, colorspace, tictoc)
#install.packages("P:/ORD_Goodman_201909071D/Upload/parsnip_0.2.1.zip", repo = NULL,
#lib = "P:/ORD_Goodman_201909071D/Upload/" )
#install.packages("P:/ORD_Goodman_201909071D/Upload/rlang_1.0.2.zip", repo = NULL,
#                 lib = "P:/ORD_Goodman_201909071D/Upload/" )
#library(parsnip, lib.loc = "P:/ORD_Goodman_201909071D/Upload/" )
#library(rlang, lib.loc = "P:/ORD_Goodman_201909071D/Upload/" )
p_load(tidytext, textrecipes, textclean, stringr)
#p_load(tidymodels, parsnip, naivebayes, ranger, xgboost,
#       kernlab, kknn, keras, workflowsets, themis, stacks, vip) #Models
library(tidymodels)
library(parsnip)
library(naivebayes)
library(ranger)
library(xgboost)
library(kernlab)
library(kknn)
library(keras)
library(workflowsets)
library(themis)
library(stacks)
library(vip)
#library(discrim)
p_load(furrr)
plan(multisession, workers = 4)
p_load(plotROC, cvms)
#set up custom options
options(scipen = 999)
set.seed(100)
theme_set(theme_minimal())
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df <- data.frame(doc_id = c(1, 2),
text = c("57 y/o male denies history of injection drug use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
df <- data.frame(doc_id = c(1, 2),
text = c("57 y/o male denies history of injection drug use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Use negex to tag negated toxens
negex.list <- map(annotated_text, ~{
negex_processor(.x, negex_simp, 6)
}
)
#Remove negated tokens
negex.remove <- map(negex.list, ~{
.x %>%
filter(negated == FALSE) %>%
filter(!negex_category %in% c("definiteNegatedExistence", "probableNegatedExistence")) %>%
group_by(doc_id) %>%
summarise(text.neg = paste0(token, collapse = " "))
})
df.neg <- bind_rows(negex.remove)
df <- df %>% left_join(df.neg, by = "doc_id")
df <- data.frame(doc_id = c("1", "2"),
text = c("57 y/o male denies history of injection drug use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Use negex to tag negated toxens
negex.list <- map(annotated_text, ~{
negex_processor(.x, negex_simp, 6)
}
)
#Remove negated tokens
negex.remove <- map(negex.list, ~{
.x %>%
filter(negated == FALSE) %>%
filter(!negex_category %in% c("definiteNegatedExistence", "probableNegatedExistence")) %>%
group_by(doc_id) %>%
summarise(text.neg = paste0(token, collapse = " "))
})
df.neg <- bind_rows(negex.remove)
df <- df %>% left_join(df.neg, by = "doc_id")
df.predicted <- bind_cols(df %>% mutate(doc_id = as.numeric(doc_id)),
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
View(df.neg)
summary(test_fitted)
tokenize_words("yes")
devtools::install_version("textrecipes", version = "0.4.1", repos = "http://cran.us.r-project.org")
p_load(tidyverse, tidylog, tidymodels, tidytext, workflowsets, readxl, kernlab, xgboost, parsnip)
p_load(tidyverse, tidylog, purrr, tidymodels, tidytext, textrecipes, textclean, stringr, tokenizers, workflowsets, themis)
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df <- data.frame(doc_id = c("1", "2"),
text = c("57 y/o male report IVDU, heroin and methamphetamine use",
"57 y/o male report IVDU, heroin and methamphetamine use"))
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Use negex to tag negated toxens
negex.list <- map(annotated_text, ~{
negex_processor(.x, negex_simp, 6)
}
)
#Remove negated tokens
negex.remove <- map(negex.list, ~{
.x %>%
filter(negated == FALSE) %>%
filter(!negex_category %in% c("definiteNegatedExistence", "probableNegatedExistence")) %>%
group_by(doc_id) %>%
summarise(text.neg = paste0(token, collapse = " "))
})
df.neg <- bind_rows(negex.remove)
df <- df %>% left_join(df.neg, by = "doc_id")
df <- df %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug use", ignore_case = T),  replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug use", ignore_case = T), replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug use", ignore_case = T), replacement = "IVDU"))
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df <- readRDS("Data/df_pwid.rds")
df$doc_id <- df$id
#Annotate text using udpipe
annotated_text <- map(1:nrow(df), ~ {
udpipe::udpipe_annotate(udmodel, x = df[.x,]$text, doc_id = df[.x, ]$doc_id,
tokenizer = "tokenizer", tagger = "default",
parser = "default") %>%
as.data.frame(., detailed = TRUE)
}
)
#Use negex to tag negated toxens
negex.list <- map(annotated_text, ~{
negex_processor(.x, negex_simp, 6)
}
)
#Remove negated tokens
negex.remove <- map(negex.list, ~{
.x %>%
filter(negated == FALSE) %>%
filter(!negex_category %in% c("definiteNegatedExistence", "probableNegatedExistence")) %>%
group_by(doc_id) %>%
summarise(text.neg = paste0(token, collapse = " "))
})
df.neg <- bind_rows(negex.remove)
df <- df %>% left_join(df.neg, by = "doc_id")
df <- df %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug use", ignore_case = T),  replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("intravenous drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug use", ignore_case = T), replacement = "IVDU")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("IV drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug abuse", ignore_case = T), replacement = "IVDA")) %>%
mutate(text.neg = str_replace_all(text.neg, pattern = regex("injection drug use", ignore_case = T), replacement = "IVDU"))
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
sessionDetails()
sessionInfo()
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
View(df)
test_fitted <- readRDS("Output/fit_model_predict.rds")
df.predicted <- bind_cols(df,
predict(test_fitted, new_data = df, type = "class"),
predict(test_fitted, new_data = df, type = "prob"))
write_rds(df, "df_example.rds")
